{
  "swagger": "2.0",
  "info": {
    "description": "Curious Crowd",
    "title": "Curious Crowd"
  },
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "get": {
        "operationId": "listUsers",
        "summary": "List Users",
        "description": "Returns a list of Users",
        "tags": [
          "list",
          "User"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User listed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createUser",
        "summary": "Create User",
        "description": "Creates a new User",
        "tags": [
          "create",
          "User"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "User data to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "summary": "Get User",
        "description": "Returns a single User",
        "tags": [
          "single",
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to return.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "User returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateUser",
        "summary": "Update User",
        "description": "Updates a User",
        "tags": [
          "patch",
          "update",
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to update.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "data",
            "description": "User data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUser",
        "summary": "Delete User",
        "description": "Deletes a User",
        "tags": [
          "delete",
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of User to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "operationId": "listPosts",
        "summary": "List Posts",
        "description": "Returns a list of Posts",
        "tags": [
          "list",
          "Post"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Post listed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createPost",
        "summary": "Create Post",
        "description": "Creates a new Post",
        "tags": [
          "create",
          "Post"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Post data to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post created",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Post not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/posts/{postId}": {
      "get": {
        "operationId": "getPost",
        "summary": "Get Post",
        "description": "Returns a single Post",
        "tags": [
          "single",
          "Post"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of Post to return.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Post returned",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Post not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updatePost",
        "summary": "Update Post",
        "description": "Updates a Post",
        "tags": [
          "patch",
          "update",
          "Post"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of Post to update.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "data",
            "description": "Post data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Post not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePost",
        "summary": "Delete Post",
        "description": "Deletes a Post",
        "tags": [
          "delete",
          "Post"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of Post to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "Post not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "operationId": "listComments",
        "summary": "List Comments",
        "description": "Returns a list of Comments",
        "tags": [
          "list",
          "Comment"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment listed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createComment",
        "summary": "Create Comment",
        "description": "Creates a new Comment",
        "tags": [
          "create",
          "Comment"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Comment data to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment created",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments/{commentId}": {
      "get": {
        "operationId": "getComment",
        "summary": "Get Comment",
        "description": "Returns a single Comment",
        "tags": [
          "single",
          "Comment"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of Comment to return.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment returned",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateComment",
        "summary": "Update Comment",
        "description": "Updates a Comment",
        "tags": [
          "patch",
          "update",
          "Comment"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of Comment to update.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "data",
            "description": "Comment data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment updated",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteComment",
        "summary": "Delete Comment",
        "description": "Deletes a Comment",
        "tags": [
          "delete",
          "Comment"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of Comment to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/expenses": {
      "get": {
        "operationId": "listExpenses",
        "summary": "List Expenses",
        "description": "Returns a list of Expenses",
        "tags": [
          "list",
          "Expense"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense listed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Expense"
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createExpense",
        "summary": "Create Expense",
        "description": "Creates a new Expense",
        "tags": [
          "create",
          "Expense"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Expense data to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expense created",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Expense not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/expenses/{expenseId}": {
      "get": {
        "operationId": "getExpense",
        "summary": "Get Expense",
        "description": "Returns a single Expense",
        "tags": [
          "single",
          "Expense"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of Expense to return.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense returned",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Expense not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateExpense",
        "summary": "Update Expense",
        "description": "Updates a Expense",
        "tags": [
          "patch",
          "update",
          "Expense"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of Expense to update.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "data",
            "description": "Expense data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expense updated",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Expense not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteExpense",
        "summary": "Delete Expense",
        "description": "Deletes a Expense",
        "tags": [
          "delete",
          "Expense"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of Expense to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense deleted",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "Expense not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "operationId": "listNotes",
        "summary": "List Notes",
        "description": "Returns a list of Notes",
        "tags": [
          "list",
          "Note"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Note listed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createNote",
        "summary": "Create Note",
        "description": "Creates a new Note",
        "tags": [
          "create",
          "Note"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Note data to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note created",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Note not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notes/{noteId}": {
      "get": {
        "operationId": "getNote",
        "summary": "Get Note",
        "description": "Returns a single Note",
        "tags": [
          "single",
          "Note"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of Note to return.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Note returned",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Note not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateNote",
        "summary": "Update Note",
        "description": "Updates a Note",
        "tags": [
          "patch",
          "update",
          "Note"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of Note to update.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "data",
            "description": "Note data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note updated",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Note not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteNote",
        "summary": "Delete Note",
        "description": "Deletes a Note",
        "tags": [
          "delete",
          "Note"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of Note to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Note deleted",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "Note not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "Empty": {
      "properties": {}
    },
    "user": {
      "$ref": "./entities/user.yml"
    },
    "post": {
      "$ref": "./entities/post.yml"
    },
    "comment": {
      "$ref": "./entities/comment.yml"
    },
    "expense": {
      "$ref": "./entities/expense.yml"
    },
    "note": {
      "$ref": "./entities/note.yml"
    },
    "Comment": {
      "title": "Comment",
      "definitions": {
        "attributes": {
          "type": "object",
          "properties": {
            "postId": {
              "type": "string",
              "readOnly": true
            },
            "commentId": {
              "type": "string",
              "readOnly": true
            },
            "userId": {
              "type": "string",
              "description": "User who posted the comment",
              "readOnly": true,
              "x-codeGenie": {
                "defaultValue": "$currentUserId",
                "foreignKey": {
                  "referencedEntity": "User"
                }
              }
            },
            "comment": {
              "type": "string",
              "x-codeGenie": {
                "ui": {
                  "inputType": "textarea"
                }
              }
            },
            "parentId": {
              "type": "string",
              "readOnly": true
            },
            "upvotes": {
              "type": "number",
              "readOnly": true
            }
          },
          "required": [
            "postId",
            "commentId",
            "userId",
            "comment"
          ],
          "additionalProperties": false
        }
      },
      "allOf": [
        {
          "type": "object",
          "$ref": "#/definitions/attributes"
        }
      ]
    },
    "Expense": {
      "title": "Expense",
      "definitions": {
        "attributes": {
          "type": "object",
          "properties": {
            "expenseId": {
              "type": "string",
              "readOnly": true
            },
            "userId": {
              "type": "string",
              "description": "User who posted the expense",
              "readOnly": true,
              "x-codeGenie": {
                "defaultValue": "$currentUserId",
                "foreignKey": {
                  "referencedEntity": "User"
                }
              }
            },
            "title": {
              "type": "string"
            },
            "ammount": {
              "type": "number",
              "x-codeGenie": {
                "ui": {
                  "format": "money"
                }
              }
            },
            "note": {
              "type": "string",
              "x-codeGenie": {
                "ui": {
                  "inputType": "textarea"
                }
              }
            },
            "category": {
              "type": "array",
              "items": {
                "enum": [
                  "home",
                  "food",
                  "insurance"
                ]
              }
            }
          },
          "required": [
            "expenseId",
            "userId",
            "title",
            "ammount",
            "category"
          ],
          "additionalProperties": false
        }
      },
      "allOf": [
        {
          "type": "object",
          "$ref": "#/definitions/attributes"
        }
      ]
    },
    "Note": {
      "title": "Note",
      "definitions": {
        "attributes": {
          "type": "object",
          "properties": {
            "expenseId": {
              "type": "string",
              "readOnly": true
            },
            "noteId": {
              "type": "string",
              "readOnly": true
            },
            "userId": {
              "type": "string",
              "description": "User who posted the comment",
              "readOnly": true,
              "x-codeGenie": {
                "defaultValue": "$currentUserId",
                "foreignKey": {
                  "referencedEntity": "User"
                }
              }
            },
            "comment": {
              "type": "string",
              "x-codeGenie": {
                "ui": {
                  "inputType": "textarea"
                }
              }
            },
            "parentId": {
              "type": "string",
              "readOnly": true
            }
          },
          "required": [
            "postId",
            "commentId",
            "userId",
            "comment"
          ],
          "additionalProperties": false
        }
      },
      "allOf": [
        {
          "type": "object",
          "$ref": "#/definitions/attributes"
        }
      ]
    },
    "Post": {
      "title": "Post",
      "definitions": {
        "attributes": {
          "type": "object",
          "properties": {
            "postId": {
              "type": "string",
              "readOnly": true
            },
            "userId": {
              "type": "string",
              "description": "User who posted the link",
              "readOnly": true,
              "x-codeGenie": {
                "defaultValue": "$currentUserId",
                "foreignKey": {
                  "referencedEntity": "User"
                }
              }
            },
            "url": {
              "type": "string",
              "format": "uri"
            },
            "title": {
              "type": "string"
            },
            "comment": {
              "type": "string",
              "x-codeGenie": {
                "ui": {
                  "inputType": "textarea"
                }
              }
            },
            "description": {
              "type": "string",
              "x-codeGenie": {
                "ui": {
                  "inputType": "textarea"
                }
              }
            },
            "upvotes": {
              "type": "number",
              "readOnly": true
            }
          },
          "required": [
            "postId",
            "userId",
            "url",
            "title"
          ],
          "additionalProperties": false
        }
      },
      "allOf": [
        {
          "type": "object",
          "$ref": "#/definitions/attributes"
        }
      ]
    },
    "User": {
      "title": "User",
      "definitions": {
        "attributes": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "readOnly": true
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "avatar": {
              "type": "string",
              "contentEncoding": "base64",
              "contentMediaType": "image/png"
            }
          },
          "required": [
            "userId",
            "name",
            "email"
          ],
          "additionalProperties": false
        }
      },
      "allOf": [
        {
          "type": "object",
          "$ref": "#/definitions/attributes"
        }
      ]
    }
  }
}